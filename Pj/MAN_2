
(defvar *game* nil )

(defstruct player 
		   board-status
           player1
           player2
)

(defstruct player1
           score
)

(defstruct player2
           score
)


(defun initialize-game ()
  (setf *game* (make-player 
                :board-status (make-array 12 :initial-element 4) 
                :player1 (make-player1 :score 0)
                :player2 (make-player2 :score 0)
                )	
  ))
  
 (defun print-board (game) 
   (let ((board-status (player-board-status game))
;;; 	      (len (length board-status))
 	      (player1-score (player1-score  (player-player1  game)))
 	      (player2-score (player2-score  (player-player2  game)))
 	      )
 	      (terpri)
 	      
 	      (princ "----------***MANCALA GAME***----------")
 	      
 	      (terpri)
 	      (princ "_______________________________________")
 	      (terpri)	
		  (terpri)	 		        
 	      
 	      (princ "PLAYER1: " )
 	       	
 	       	 (dotimes (j (/ (length board-status) 2))
 	           (princ (aref  board-status j))
 	           (princ " | "))
 	 	  (terpri)
 	 	  (terpri)
 	 
 	 (princ " P1-SCORE :") (princ player1-score) 
 	 (princ "   ")
 	 (princ " P2-SCORE :")(princ  player2-score)
 	 	  (terpri)
	 	  (terpri) 	 
 	   	 
 	   	 (princ "PLAYER2: " )
 	 		
			   (loop for k from (- (length board-status) 1) downto (/ (length board-status) 2)
			   do
 	           (princ (aref  board-status k))
 	           (princ " | "))

 	           (terpri)
 	           (princ "_______________________________________")
 	           (terpri)
 	           ))
 	           
(defun start-game ()
   (initialize-game)
   (print-board *game*))